import{_ as e,c as a,o as t,a as i}from"./app.a4051cfb.js";const u=JSON.parse('{"title":"Fields Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[{"level":3,"title":"Container Class","slug":"container-class","link":"#container-class","children":[]},{"level":3,"title":"Floating Labels","slug":"floating-labels","link":"#floating-labels","children":[]},{"level":3,"title":"Use Tabbed Interface","slug":"use-tabbed-interface","link":"#use-tabbed-interface","children":[]},{"level":3,"title":"Preview Mode","slug":"preview-mode","link":"#preview-mode","children":[]},{"level":3,"title":"Limit Fields","slug":"limit-fields","link":"#limit-fields","children":[]},{"level":3,"title":"Limit Tabs","slug":"limit-tabs","link":"#limit-tabs","children":[]}]}],"relativePath":"attributize/usage/component.md"}'),l={name:"attributize/usage/component.md"},o=i('<h1 id="fields-component" tabindex="-1">Fields Component <a class="header-anchor" href="#fields-component" aria-hidden="true">#</a></h1><p>Each integration will provide its own fields component to display the corresponding fields. The fields component will search the current page/layout for the component matching the integration, so both must be added to the page/layout.</p><p>For example, the RainLab.User integration requires both the RainLab.User account and AttributizeUsers userFields components to be added to the page/layout.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><h3 id="container-class" tabindex="-1">Container Class <a class="header-anchor" href="#container-class" aria-hidden="true">#</a></h3><p>Container class used for fields container. Default: <code>row</code></p><h3 id="floating-labels" tabindex="-1">Floating Labels <a class="header-anchor" href="#floating-labels" aria-hidden="true">#</a></h3><p>Enable Bootstrap 5 floating labels on form fields. Default: <code>false</code></p><h3 id="use-tabbed-interface" tabindex="-1">Use Tabbed Interface <a class="header-anchor" href="#use-tabbed-interface" aria-hidden="true">#</a></h3><p>Use Bootstrap 5 tabbed interface for fields. Default: <code>true</code></p><h3 id="preview-mode" tabindex="-1">Preview Mode <a class="header-anchor" href="#preview-mode" aria-hidden="true">#</a></h3><p>User preview mode for the form fields (read only). Default: <code>false</code></p><h3 id="limit-fields" tabindex="-1">Limit Fields <a class="header-anchor" href="#limit-fields" aria-hidden="true">#</a></h3><p>Limit to checked fields. If none are checked, show all. Default: <code>[]</code></p><div class="danger custom-block"><p class="custom-block-title">Validation Notice</p><p>Fields not included in <code>codes</code> will not be validated.</p></div><h3 id="limit-tabs" tabindex="-1">Limit Tabs <a class="header-anchor" href="#limit-tabs" aria-hidden="true">#</a></h3><p>Limit fields to checked tab. If none are checked, show all. Default: <code>[]</code></p><div class="danger custom-block"><p class="custom-block-title">Validation Notice</p><p>Fields not included in <code>tabs</code> will not be validated.</p></div>',18),d=[o];function s(n,r,c,h,p,f){return t(),a("div",null,d)}const m=e(l,[["render",s]]);export{u as __pageData,m as default};
